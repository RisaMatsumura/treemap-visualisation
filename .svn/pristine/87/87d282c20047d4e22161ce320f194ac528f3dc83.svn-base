package utility;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;

import TreeMap.*;
import model.*;

public class SliceAndDice implements Algorithm{

	//actual size
	//int height = 348;
	//int width = 666;
	
	int height = 348;
	int width = 666;
	private DataTree dataTree;
	private TreeMap treeMap;
	//private ArrayList<int[]> result;

	
	public SliceAndDice (DataTree theDataTree, TreeMap treeMap)
	{
		dataTree = theDataTree;
		this.treeMap = treeMap;
		//result = new ArrayList<int[]>();
	}
	/*
	private ArrayList<int []> divideAll(DataTree theDataTree){
		Parent top = theDataTree.getTop();
		for (int i=0; i<top.getNumberOfChildren(); i++){
			double childPercentage = top.getContents().get(i).getPercentage();
			
		}
	}
	
	private int [] dividOne(int X, int Y, int height, int width, double percentage, Boolean isOdd){
		
		if (isOdd){
			int [] oneRectangle = {X, Y, height, (int) (width*percentage)};
			return oneRectangle;
		}else{
			int [] oneRectangle = {X, Y, (int) (height*percentage), width};
			return oneRectangle;
		}
	}
	
	
	public ArrayList<int []> getData(){
		
		
		return 
	}
	*/
	public TreeMap runAlgorithm(){
		applyRule (2, 2, width, height, Sorter.sort(dataTree.getTop()), true);
		return treeMap;

	}
	
	
	public void applyRule(int x, int y, int width, int height, Node node, boolean isOdd)
	{
		List<Node> children = ((Parent) node).getContents();
		int currentWidth = width;
		int currentHeight = height;
		int currentX = x;
		int currentY = y;
		
		
		for(Node child : children)
		{

			if(isOdd)
			{
				currentWidth = (int) (width * child.getPercentage());		// width x node %
				treeMap.addShape(new Rectangle(currentX, currentY, currentWidth, currentHeight));
				treeMap.addShape(new Rectangle(currentX+1, currentY+1, currentWidth-2, currentHeight-2));
				if(child instanceof Parent)
				{
					
					applyRule(currentX, currentY, currentWidth, currentHeight, child, !(isOdd));
				}
				currentX += currentWidth;
			}
			else if(!isOdd)
			{
				currentHeight = (int) (height * child.getPercentage());
				treeMap.addShape(new Rectangle(currentX, currentY, currentWidth, currentHeight));
				treeMap.addShape(new Rectangle(currentX+1, currentY+1, currentWidth-2, currentHeight-2));
				if(child instanceof Parent)
				{
					
					applyRule(currentX, currentY, currentWidth, currentHeight, child, !(isOdd));
				}
				currentY += currentHeight;
			}
			
			

			
		}
	}
	
	public static void main(String arg[]){
		File file = new File("/home/louis/workspace/Prototype");
		TreeMap treeMap = new TreeMap();
		SliceAndDice sliceNDice = new SliceAndDice(DataTree.getInstance(file), treeMap);
		sliceNDice.runAlgorithm();
		for (int i = 0; i<treeMap.getListOfShapes().size(); i++){
			System.out.println(treeMap.getListOfShapes().get(i).getX());
			System.out.println(treeMap.getListOfShapes().get(i).getY());
		}
		
		JFrame frame = new JFrame();
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(treeMap.get());
		frame.setSize(700, 400);
		frame.pack();
		frame.setVisible(true);
		
		 
		}

		
		

		/*
		// Method 2: displaying a treemap by drawing borders
		int startPosition = 0;
		int numOfChildren = tree.getRootElement().getNumberOfChildren();
		List<Node> children = tree.getRootElement().getChildren();
		
		Border[] borders = new Border[numOfChildren-1];
		for(int i = 0; i < numOfChildren-1; i++) {
			Node child = children.get(i);
			startPosition += (int) (1000 * child.getRatio());
			
			borders[i] = new Border(startPosition, 0, 1, 500);
			borders[i].makeVisible();

		}
		*/
}
	

